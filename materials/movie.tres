[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://cra3ygltnfrya"]

[sub_resource type="Shader" id="Shader_jd5ly"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_noise : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform float noise_strength : hint_range(0.0, 1.0) = 0.0;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	vec4 noise_tex = texture(texture_noise, UV);
	ALBEDO = mix((albedo.rgb * albedo_tex.rgb), noise_tex.rgb, noise_strength);

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv).rgb;
	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
}
"

[sub_resource type="ViewportTexture" id="ViewportTexture_jd5ly"]
viewport_path = NodePath("MeshInstance3D/SubViewport")

[sub_resource type="ViewportTexture" id="ViewportTexture_q3kqy"]
viewport_path = NodePath("MeshInstance3D/SubViewport")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_ewjkw"]
frequency = 0.25

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ewjkw"]
noise = SubResource("FastNoiseLite_ewjkw")

[resource]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_jd5ly")
shader_parameter/texture_noise = SubResource("NoiseTexture2D_ewjkw")
shader_parameter/noise_strength = 1.0
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = SubResource("ViewportTexture_jd5ly")
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_emission = SubResource("ViewportTexture_q3kqy")
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 16.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
